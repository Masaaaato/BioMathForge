entity_gene_symbols,entity,entity_id,initial concentration/amount,reaction with entity labels,reaction with entity ids,reactants,products,modifiers,model,organism,publication,rate with entity labels,rate with entity ids,parameters,entity access url,reaction SBO link,entity SBO link,external links,product_gene_ids,product_gene_symbols,reactant_gene_ids,reactant_gene_symbols,modifier_gene_ids,modifier_gene_symbols,entity_gene_ids,Relation,reactants_modified,products_modified,modifiers_modified,inferred_reaction,inferred_reaction_thought,reaction with inferred entities,rate with inferred entities,inferred success,inter_pub_rank,inter_pub_score,inter_pub_zscore,inter_sim_rank,inter_sim_score,inter_sim_zscore,intra_sim_rank,intra_sim_score,intra_sim_zscore,averaged_rank,averaged_zscore,averaged_zscore_rank,count
"AKT1, PIK3R1","['[RAC-alpha serine/threonine-protein kinase]', '[RAC-alpha serine/threonine-protein kinase; phosphorylated]', '[RAC-alpha serine/threonine-protein kinase]', '[RAC-alpha serine/threonine-protein kinase]']","['AKT', 'species 16', 'AKTp', 'species 17']","['0.6 nmol', '0.0 nmol', '0.0 nmol', '10.0 nmol']","['AKT => AKTp; PI3K', 'species_17 => species_16; species_14', 'AKT => AKTp; PI3K', 'species_17 => species_16; species_14']","['AKT => AKTp; PI3K', 'species_17 => species_16; species_14', 'AKT => AKTp; PI3K', 'species_17 => species_16; species_14']","['AKT$AKT$http://identifiers.org/uniprot/P31749|RAC-alpha serine/threonine-protein kinase', 'species_17$AKT$http://identifiers.org/uniprot/P31749|RAC-alpha serine/threonine-protein kinase', 'AKT$AKT$http://identifiers.org/uniprot/P31749|RAC-alpha serine/threonine-protein kinase', 'species_17$AKT$http://identifiers.org/uniprot/P31749|RAC-alpha serine/threonine-protein kinase']","['AKTp$AKTp$http://identifiers.org/uniprot/P31749|RAC-alpha serine/threonine-protein kinase', 'species_16$pAKT$http://identifiers.org/uniprot/P31749|RAC-alpha serine/threonine-protein kinase; http://identifiers.org/pato/PATO:0002220|phosphorylated', 'AKTp$AKTp$http://identifiers.org/uniprot/P31749|RAC-alpha serine/threonine-protein kinase', 'species_16$pAKT$http://identifiers.org/uniprot/P31749|RAC-alpha serine/threonine-protein kinase; http://identifiers.org/pato/PATO:0002220|phosphorylated']","['PI3K$PI3K$http://identifiers.org/uniprot/P27986|Phosphatidylinositol 3-kinase regulatory subunit alpha', 'species_14$PI3K_Active$http://identifiers.org/uniprot/P27986|Phosphatidylinositol 3-kinase regulatory subunit alpha; http://identifiers.org/ncit/C45329|Active', 'PI3K$PI3K$http://identifiers.org/uniprot/P27986|Phosphatidylinositol 3-kinase regulatory subunit alpha', 'species_14$PI3K_Active$http://identifiers.org/uniprot/P27986|Phosphatidylinositol 3-kinase regulatory subunit alpha; http://identifiers.org/ncit/C45329|Active']","['BIOMD0000000818', 'BIOMD0000000883', 'BIOMD0000000818', 'BIOMD0000000883']","['Mammalia', 'Homo sapiens', 'Mammalia', 'Homo sapiens']","['http://identifiers.org/pubmed/18463697', 'http://identifiers.org/biomodels.db/MODEL1902140001; http://identifiers.org/pubmed/30481266', 'http://identifiers.org/pubmed/18463697', 'http://identifiers.org/biomodels.db/MODEL1902140001; http://identifiers.org/pubmed/30481266']","['Cell*k_ap*PI3K*AKT/(K_AP+AKT)', 'compartment_0*Kcat*species_14*species_17/(km+species_17)', 'Cell*k_ap*PI3K*AKT/(K_AP+AKT)', 'compartment_0*Kcat*species_14*species_17/(km+species_17)']","['Cell*k_ap*PI3K*AKT/(K_AP+AKT)', 'compartment_0*Kcat*species_14*species_17/(km+species_17)', 'Cell*k_ap*PI3K*AKT/(K_AP+AKT)', 'compartment_0*Kcat*species_14*species_17/(km+species_17)']","['K_AP = 0.01 nmol/l; k_ap = 360.0 1/h', 'Kcat=0.1; km=0.1', 'K_AP = 0.01 nmol/l; k_ap = 360.0 1/h', 'Kcat=0.1; km=0.1']","['http://identifiers.org/uniprot/P31749|RAC-alpha serine/threonine-protein kinase', 'http://identifiers.org/uniprot/P31749|RAC-alpha serine/threonine-protein kinase; http://identifiers.org/pato/PATO:0002220|phosphorylated', 'http://identifiers.org/uniprot/P31749|RAC-alpha serine/threonine-protein kinase', 'http://identifiers.org/uniprot/P31749|RAC-alpha serine/threonine-protein kinase']","['', '', '', '']","['', '', '', '']","['sabiork.compound:P31749; reactome:P31749; opentargets:ENSG00000142208', 'sabiork.compound:P31749; reactome:P31749; opentargets:ENSG00000142208', 'sabiork.compound:P31749; reactome:P31749; opentargets:ENSG00000142208', 'sabiork.compound:P31749; reactome:P31749; opentargets:ENSG00000142208']","['207', '207', '207', '207']","['AKT1', 'AKT1', 'AKT1', 'AKT1']","['207', '207', '207', '207']","['AKT1', 'AKT1', 'AKT1', 'AKT1']","['5295', '5295', '5295', '5295']","['PIK3R1', 'PIK3R1', 'PIK3R1', 'PIK3R1']","['207, 5295', '207, 5295', '207, 5295', '207, 5295']","['', '', '', '']","['AKT$AKT$AKT1', 'species_17$AKT$AKT1', 'AKT$AKT$AKT1', 'species_17$AKT$AKT1']","['AKTp$AKTp$AKT1', 'species_16$pAKT$AKT1', 'AKTp$AKTp$AKT1', 'species_16$pAKT$AKT1']","['PI3K$PI3K$PIK3R1', 'species_14$PI3K_Active$PIK3R1', 'PI3K$PI3K$PIK3R1', 'species_14$PI3K_Active$PIK3R1']","['```json\n{\n  ""AKT"": ""AKT"",\n  ""AKTp"": ""AKTp"",\n  ""PI3K"": ""PI3K""\n}\n```', '{\n  ""species_17"": ""AKT"",\n  ""species_16"": ""pAKT"",\n  ""species_14"": ""PI3K_Active""\n}', '```json\n{\n  ""AKT"": ""AKT"",\n  ""AKTp"": ""AKTp"",\n  ""PI3K"": ""PI3K""\n}\n```', '{\n  ""species_17"": ""AKT"",\n  ""species_16"": ""pAKT"",\n  ""species_14"": ""PI3K_Active""\n}']","['Okay, so I need to generate a JSON object that maps each `id` from the replacement table to a biologically interpretable term. Let me start by understanding the guidelines.\n\nFirst, each term must be a single word. If it\'s a receptor or ligand, I should combine them with an underscore. For example, ""R"" becomes ""IL6_R"" and ""L"" becomes ""CSF1R_L"". But in this case, the replacement table doesn\'t have ""R"" or ""L"", so maybe I don\'t need to worry about that here.\n\nLooking at the input, the equation is AKT => AKTp; PI3K. The replacement table has three entries:\n\n1. role: reactants, id: AKT, name: AKT, references: AKT1\n2. role: products, id: AKTp, name: AKTp, references: AKT1\n3. role: modifiers, id: PI3K, name: PI3K, references: PIK3R1\n\nSo, I need to map each id to a biologically interpretable term.\n\nStarting with AKT. The name is AKT, and the reference is AKT1. Since AKT is a well-known abbreviation for Protein Kinase B, and AKT1 is one of its isoforms. However, the guidelines say if it\'s a simple abbreviation, we don\'t need to change it significantly. So I can just use ""AKT"".\n\nNext, AKTp. The name is AKTp, which stands for phosphorylated AKT. The reference is also AKT1. So in biological terms, phosphorylated AKT is often denoted as AKT_p or p-AKT. But since the name is AKTp, maybe it\'s acceptable to keep it as ""AKTp"". Alternatively, I could write it as ""AKT_p"" for clarity, but the guidelines suggest using the name column if possible, so I\'ll stick with ""AKTp"".\n\nLastly, PI3K. The name is PI3K, and the reference is PIK3R1. PI3K stands for Phosphatidylinositol-4,5-bisphosphate 3-kinase. PIK3R1 is the regulatory subunit of PI3K. However, the name column uses ""PI3K"", which is the common abbreviation. Since it\'s a well-known term, I can keep it as ""PI3K"".\n\nWait, but looking back, the guidelines mention that sometimes a two-step process is needed: first map id to name, then refine using references. For PI3K, the reference is PIK3R1, which is a component of PI3K. But the name is PI3K, which is the general term. So I think it\'s better to use ""PI3K"" as it\'s more interpretable in biological contexts.\n\nSo putting it all together, the JSON object should have:\n\n- ""AKT"": ""AKT""\n- ""AKTp"": ""AKTp""\n- ""PI3K"": ""PI3K""\n\nI think that\'s all. Let me double-check if any terms need further refinement. AKT and AKTp are straightforward. PI3K is a common term, so no need to change. I don\'t see any need to add states like ""bound"" or ""active"" here since the names are sufficient. Also, none of these are receptors or ligands, so no underscores needed. \n\nYes, that should be it.', 'Okay, so I need to generate a JSON object that maps each id from the replacement table to a biologically interpretable term. Let me go through the problem step by step.\n\nFirst, looking at the input, there\'s an equation: species_17 => species_16; species_14. But I think the main focus is on the replacement table provided. The table has three rows with roles, ids, names, and references.\n\nThe guidelines mention that each term in the JSON must be a single word. So, I need to make sure that each id maps to a single word term. Also, if the term is a receptor or ligand, I should combine them with an underscore, like ""IL6_R"" or ""CSF1R_L"". But in this case, looking at the replacement table, the roles are reactants, products, and modifiers, not receptors or ligands. So maybe that part doesn\'t apply here.\n\nNext, if the name and references have similar terms, I should prioritize the name column. For example, species_17 has name AKT and reference AKT1. So, AKT is straightforward. But species_16 has name pAKT and reference AKT1. pAKT stands for phosphorylated AKT, so maybe I can represent it as AKT_p or something similar.\n\nWait, but the guidelines say that if it\'s a simple abbreviation, we don\'t need to change it. So pAKT is already a standard term, so maybe just keep it as pAKT. Similarly, species_14 is PI3K_Active, and the reference is PIK3R1. PI3K is a common abbreviation for phosphatidylinositol-4,5-bisphosphate 3-kinase. The active form might be represented as PI3K_active, but the name is already PI3K_Active. So maybe just convert it to lowercase or keep the format as per guidelines.\n\nBut the guidelines don\'t specify case sensitivity, so perhaps it\'s better to keep the original casing as in the name column. So PI3K_Active would stay as is, but I should check if there\'s a more standard way to represent active states. Sometimes, people use underscores, like PI3K_active. But since the name is PI3K_Active, I can map it directly.\n\nSo, putting it all together:\n\nspecies_17 maps to AKT, species_16 maps to pAKT, and species_14 maps to PI3K_Active.\n\nWait, but let me double-check. The guidelines mention that if a two-step process is needed, first map id to name, then refine using references. For species_14, the name is PI3K_Active, and the reference is PIK3R1. PIK3R1 is a regulatory subunit of PI3K, but the name is already PI3K_Active, which is a functional state. So I think it\'s okay to use PI3K_Active as the term.\n\nSimilarly, for species_17, AKT is a well-known protein, so AKT is fine. Species_16 is pAKT, which is phosphorylated AKT, so pAKT is acceptable.\n\nI don\'t see any need to change these terms further because they are already biologically interpretable as single words. Receptor and ligand terms aren\'t present here, so I don\'t need to create underscores for those.\n\nSo the final JSON would be:\n\n{\n  ""species_17"": ""AKT"",\n  ""species_16"": ""pAKT"",\n  ""species_14"": ""PI3K_Active""\n}\n\nI think that covers all the guidelines. Each id is mapped to a single word term, using the name column, and considering the active state where applicable.', 'Okay, so I need to generate a JSON object that maps each `id` from the replacement table to a biologically interpretable term. Let me start by understanding the guidelines.\n\nFirst, each term must be a single word. If it\'s a receptor or ligand, I should combine them with an underscore. For example, ""R"" becomes ""IL6_R"" and ""L"" becomes ""CSF1R_L"". But in this case, the replacement table doesn\'t have ""R"" or ""L"", so maybe I don\'t need to worry about that here.\n\nLooking at the input, the equation is AKT => AKTp; PI3K. The replacement table has three entries:\n\n1. role: reactants, id: AKT, name: AKT, references: AKT1\n2. role: products, id: AKTp, name: AKTp, references: AKT1\n3. role: modifiers, id: PI3K, name: PI3K, references: PIK3R1\n\nSo, I need to map each id to a biologically interpretable term.\n\nStarting with AKT. The name is AKT, and the reference is AKT1. Since AKT is a well-known abbreviation for Protein Kinase B, and AKT1 is one of its isoforms. However, the guidelines say if it\'s a simple abbreviation, we don\'t need to change it significantly. So I can just use ""AKT"".\n\nNext, AKTp. The name is AKTp, which stands for phosphorylated AKT. The reference is also AKT1. So in biological terms, phosphorylated AKT is often denoted as AKT_p or p-AKT. But since the name is AKTp, maybe it\'s acceptable to keep it as ""AKTp"". Alternatively, I could write it as ""AKT_p"" for clarity, but the guidelines suggest using the name column if possible, so I\'ll stick with ""AKTp"".\n\nLastly, PI3K. The name is PI3K, and the reference is PIK3R1. PI3K stands for Phosphatidylinositol-4,5-bisphosphate 3-kinase. PIK3R1 is the regulatory subunit of PI3K. However, the name column uses ""PI3K"", which is the common abbreviation. Since it\'s a well-known term, I can keep it as ""PI3K"".\n\nWait, but looking back, the guidelines mention that sometimes a two-step process is needed: first map id to name, then refine using references. For PI3K, the reference is PIK3R1, which is a component of PI3K. But the name is PI3K, which is the general term. So I think it\'s better to use ""PI3K"" as it\'s more interpretable in biological contexts.\n\nSo putting it all together, the JSON object should have:\n\n- ""AKT"": ""AKT""\n- ""AKTp"": ""AKTp""\n- ""PI3K"": ""PI3K""\n\nI think that\'s all. Let me double-check if any terms need further refinement. AKT and AKTp are straightforward. PI3K is a common term, so no need to change. I don\'t see any need to add states like ""bound"" or ""active"" here since the names are sufficient. Also, none of these are receptors or ligands, so no underscores needed. \n\nYes, that should be it.', 'Okay, so I need to generate a JSON object that maps each id from the replacement table to a biologically interpretable term. Let me go through the problem step by step.\n\nFirst, looking at the input, there\'s an equation: species_17 => species_16; species_14. But I think the main focus is on the replacement table provided. The table has three rows with roles, ids, names, and references.\n\nThe guidelines mention that each term in the JSON must be a single word. So, I need to make sure that each id maps to a single word term. Also, if the term is a receptor or ligand, I should combine them with an underscore, like ""IL6_R"" or ""CSF1R_L"". But in this case, looking at the replacement table, the roles are reactants, products, and modifiers, not receptors or ligands. So maybe that part doesn\'t apply here.\n\nNext, if the name and references have similar terms, I should prioritize the name column. For example, species_17 has name AKT and reference AKT1. So, AKT is straightforward. But species_16 has name pAKT and reference AKT1. pAKT stands for phosphorylated AKT, so maybe I can represent it as AKT_p or something similar.\n\nWait, but the guidelines say that if it\'s a simple abbreviation, we don\'t need to change it. So pAKT is already a standard term, so maybe just keep it as pAKT. Similarly, species_14 is PI3K_Active, and the reference is PIK3R1. PI3K is a common abbreviation for phosphatidylinositol-4,5-bisphosphate 3-kinase. The active form might be represented as PI3K_active, but the name is already PI3K_Active. So maybe just convert it to lowercase or keep the format as per guidelines.\n\nBut the guidelines don\'t specify case sensitivity, so perhaps it\'s better to keep the original casing as in the name column. So PI3K_Active would stay as is, but I should check if there\'s a more standard way to represent active states. Sometimes, people use underscores, like PI3K_active. But since the name is PI3K_Active, I can map it directly.\n\nSo, putting it all together:\n\nspecies_17 maps to AKT, species_16 maps to pAKT, and species_14 maps to PI3K_Active.\n\nWait, but let me double-check. The guidelines mention that if a two-step process is needed, first map id to name, then refine using references. For species_14, the name is PI3K_Active, and the reference is PIK3R1. PIK3R1 is a regulatory subunit of PI3K, but the name is already PI3K_Active, which is a functional state. So I think it\'s okay to use PI3K_Active as the term.\n\nSimilarly, for species_17, AKT is a well-known protein, so AKT is fine. Species_16 is pAKT, which is phosphorylated AKT, so pAKT is acceptable.\n\nI don\'t see any need to change these terms further because they are already biologically interpretable as single words. Receptor and ligand terms aren\'t present here, so I don\'t need to create underscores for those.\n\nSo the final JSON would be:\n\n{\n  ""species_17"": ""AKT"",\n  ""species_16"": ""pAKT"",\n  ""species_14"": ""PI3K_Active""\n}\n\nI think that covers all the guidelines. Each id is mapped to a single word term, using the name column, and considering the active state where applicable.']","['AKT => AKTp; PI3K', 'AKT => pAKT; PI3K_Active', 'AKT => AKTp; PI3K', 'AKT => pAKT; PI3K_Active']","['Cell*k_ap*PI3K*AKT/(K_AP+AKT)', 'compartment_0*Kcat*PI3K_Active*AKT/(km+AKT)', 'Cell*k_ap*PI3K*AKT/(K_AP+AKT)', 'compartment_0*Kcat*PI3K_Active*AKT/(km+AKT)']","[True, True, True, True]",12.0,18.247496419168755,3.7172746371124017,14.0,1.2212116718292236,3.0947983342129497,37.0,0.1571419686079025,2.3103692039461423,33.0,2.4929804175655645,12.0,4
"MAP2K1, MAP2K2, MAPK1, MAPK3","['[Mitogen-activated protein kinase 1; Mitogen-activated protein kinase 3]', '[Mitogen-activated protein kinase 3; Mitogen-activated protein kinase 1]']","['species 10', 'species 11']","['0.0 mmol', '600000.0 mmol']","['species_11 => species_10; species_8', 'species_11 => species_10; species_8']","['species_11 => species_10; species_8', 'species_11 => species_10; species_8']","['species_11$ErkInactive$http://identifiers.org/uniprot/P21708|Mitogen-activated protein kinase 3; http://identifiers.org/uniprot/P63086|Mitogen-activated protein kinase 1', 'species_11$ErkInactive$http://identifiers.org/uniprot/P21708|Mitogen-activated protein kinase 3; http://identifiers.org/uniprot/P63086|Mitogen-activated protein kinase 1']","['species_10$ErkActive$http://identifiers.org/uniprot/P63086|Mitogen-activated protein kinase 1; http://identifiers.org/uniprot/P21708|Mitogen-activated protein kinase 3', 'species_10$ErkActive$http://identifiers.org/uniprot/P63086|Mitogen-activated protein kinase 1; http://identifiers.org/uniprot/P21708|Mitogen-activated protein kinase 3']","['species_8$MekActive$http://identifiers.org/uniprot/P36506|Dual specificity mitogen-activated protein kinase kinase 2; http://identifiers.org/uniprot/Q01986|Dual specificity mitogen-activated protein kinase kinase 1', 'species_8$MekActive$http://identifiers.org/uniprot/P36506|Dual specificity mitogen-activated protein kinase kinase 2; http://identifiers.org/uniprot/Q01986|Dual specificity mitogen-activated protein kinase kinase 1']","['BIOMD0000000623', 'BIOMD0000000623']","['Rattus norvegicus', 'Rattus norvegicus']","['http://identifiers.org/pubmed/19804630', 'http://identifiers.org/pubmed/19804630']","['compartment_0*Kcat*species_8*species_11/(km+species_11)', 'compartment_0*Kcat*species_8*species_11/(km+species_11)']","['compartment_0*Kcat*species_8*species_11/(km+species_11)', 'compartment_0*Kcat*species_8*species_11/(km+species_11)']","['Kcat=9.85367; km=1007340.0', 'Kcat=9.85367; km=1007340.0']","['http://identifiers.org/uniprot/P63086|Mitogen-activated protein kinase 1; http://identifiers.org/uniprot/P21708|Mitogen-activated protein kinase 3', 'http://identifiers.org/uniprot/P21708|Mitogen-activated protein kinase 3; http://identifiers.org/uniprot/P63086|Mitogen-activated protein kinase 1']","['', '']","['', '']","['reactome:P63086; reactome:P21708; opentargets:ENSRNOG00000001849; opentargets:ENSRNOG00000053583', 'reactome:P21708; reactome:P63086; opentargets:ENSRNOG00000053583; opentargets:ENSRNOG00000001849']","['5594, 5595', '5594, 5595']","['MAPK1, MAPK3', 'MAPK1, MAPK3']","['5594, 5595', '5594, 5595']","['MAPK1, MAPK3', 'MAPK1, MAPK3']","['5604, 5605', '5604, 5605']","['MAP2K1, MAP2K2', 'MAP2K1, MAP2K2']","['5594, 5595, 5604, 5605', '5594, 5595, 5604, 5605']","['', '']","['species_11$ErkInactive$MAPK3; MAPK1', 'species_11$ErkInactive$MAPK3; MAPK1']","['species_10$ErkActive$MAPK1; MAPK3', 'species_10$ErkActive$MAPK1; MAPK3']","['species_8$MekActive$MAP2K2; MAP2K1', 'species_8$MekActive$MAP2K2; MAP2K1']","['{\n  ""species_11"": ""ErkInactive"",\n  ""species_10"": ""ErkActive"",\n  ""species_8"": ""MekActive""\n}', '{\n  ""species_11"": ""ErkInactive"",\n  ""species_10"": ""ErkActive"",\n  ""species_8"": ""MekActive""\n}']","['Okay, so I need to generate a JSON object that maps each id from the replacement table to a biologically interpretable term. Let me go through the problem step by step.\n\nFirst, looking at the input, there\'s an equation: species_11 => species_10; species_8. This probably represents a reaction where species_11 is converted into species_10 and affects species_8. But I\'m not sure if the equation affects the mapping process directly. Maybe it\'s just context for understanding the roles.\n\nThe replacement table has three rows:\n\n1. For species_11, the name is ErkInactive, and the references are MAPK3 and MAPK1.\n2. For species_10, the name is ErkActive, with references MAPK1 and MAPK3.\n3. For species_8, the name is MekActive, and references are MAP2K2 and MAP2K1.\n\nThe guidelines say that each term must be a single word. Also, if there\'s a receptor or ligand, we connect them with an underscore. But in this case, all terms are enzymes, so maybe that doesn\'t apply here.\n\nLooking at the first id, species_11. The name is ErkInactive. The references are MAPK3 and MAPK1. Since the name is ErkInactive, which is a state, I should include that as part of the term. So, combining the name with the state gives ""ErkInactive"".\n\nNext, species_10 is ErkActive. Similarly, combining the name with the state gives ""ErkActive"".\n\nFor species_8, the name is MekActive. The references are MAP2K2 and MAP2K1. The name is already a single word, so it should be ""MekActive"".\n\nWait, but the guidelines mention that if the term is an abbreviation or interpretable, we shouldn\'t change it. Here, Erk and Mek are well-known abbreviations for extracellular signal-regulated kinase and mitogen-activated protein kinase, respectively. So, using ErkInactive, ErkActive, and MekActive is appropriate.\n\nI don\'t think any of these need to be converted into receptor or ligand terms because they are enzymes, not receptors or ligands. So, no underscores needed there.\n\nI should make sure that each term is a single word, and they are already in that form. Also, since the names are provided in the \'name\' column, I should prioritize those over the references. So, I don\'t need to change them to the reference terms.\n\nPutting it all together, the JSON object should map each id to its respective term from the \'name\' column with the state included.', 'Okay, so I need to generate a JSON object that maps each id from the replacement table to a biologically interpretable term. Let me go through the problem step by step.\n\nFirst, looking at the input, there\'s an equation: species_11 => species_10; species_8. This probably represents a reaction where species_11 is converted into species_10 and affects species_8. But I\'m not sure if the equation affects the mapping process directly. Maybe it\'s just context for understanding the roles.\n\nThe replacement table has three rows:\n\n1. For species_11, the name is ErkInactive, and the references are MAPK3 and MAPK1.\n2. For species_10, the name is ErkActive, with references MAPK1 and MAPK3.\n3. For species_8, the name is MekActive, and references are MAP2K2 and MAP2K1.\n\nThe guidelines say that each term must be a single word. Also, if there\'s a receptor or ligand, we connect them with an underscore. But in this case, all terms are enzymes, so maybe that doesn\'t apply here.\n\nLooking at the first id, species_11. The name is ErkInactive. The references are MAPK3 and MAPK1. Since the name is ErkInactive, which is a state, I should include that as part of the term. So, combining the name with the state gives ""ErkInactive"".\n\nNext, species_10 is ErkActive. Similarly, combining the name with the state gives ""ErkActive"".\n\nFor species_8, the name is MekActive. The references are MAP2K2 and MAP2K1. The name is already a single word, so it should be ""MekActive"".\n\nWait, but the guidelines mention that if the term is an abbreviation or interpretable, we shouldn\'t change it. Here, Erk and Mek are well-known abbreviations for extracellular signal-regulated kinase and mitogen-activated protein kinase, respectively. So, using ErkInactive, ErkActive, and MekActive is appropriate.\n\nI don\'t think any of these need to be converted into receptor or ligand terms because they are enzymes, not receptors or ligands. So, no underscores needed there.\n\nI should make sure that each term is a single word, and they are already in that form. Also, since the names are provided in the \'name\' column, I should prioritize those over the references. So, I don\'t need to change them to the reference terms.\n\nPutting it all together, the JSON object should map each id to its respective term from the \'name\' column with the state included.']","['ErkInactive => ErkActive; MekActive', 'ErkInactive => ErkActive; MekActive']","['compartment_0*Kcat*MekActive*ErkInactive/(km+ErkInactive)', 'compartment_0*Kcat*MekActive*ErkInactive/(km+ErkInactive)']","[True, True]",174.0,9.232719112348336,1.6003802331139392,51.0,1.0921064615249634,2.7095649614615827,21.0,0.1671469062566757,2.503478668288788,36.25,2.44539432312195,19.0,2
"MAPK1, MAPK3","['[Ribosomal protein S6 kinase [nucleoplasm]]', '[Mitogen-activated protein kinase 1; Mitogen-activated protein kinase 3]', '[Mitogen-activated protein kinase 3; Mitogen-activated protein kinase 1]']","['pRSKn', 'species 10', 'species 11']","['0.0 mmol', '0.0 mmol', '600000.0 mmol']","['=> pRSKn; ppERKn', 'species_10 => species_11; species_26', 'species_10 => species_11; species_26']","['=> pRSKn; ppERKn', 'species_10 => species_11; species_26', 'species_10 => species_11; species_26']","['', 'species_10$ErkActive$http://identifiers.org/uniprot/P63086|Mitogen-activated protein kinase 1; http://identifiers.org/uniprot/P21708|Mitogen-activated protein kinase 3', 'species_10$ErkActive$http://identifiers.org/uniprot/P63086|Mitogen-activated protein kinase 1; http://identifiers.org/uniprot/P21708|Mitogen-activated protein kinase 3']","['pRSKn$pRSKn$http://identifiers.org/reactome/REACT_13229.1|Ribosomal protein S6 kinase [nucleoplasm]', 'species_11$ErkInactive$http://identifiers.org/uniprot/P21708|Mitogen-activated protein kinase 3; http://identifiers.org/uniprot/P63086|Mitogen-activated protein kinase 1', 'species_11$ErkInactive$http://identifiers.org/uniprot/P21708|Mitogen-activated protein kinase 3; http://identifiers.org/uniprot/P63086|Mitogen-activated protein kinase 1']","['ppERKn$ppERK(nucleus)$http://identifiers.org/kegg.compound/C00562|Phosphoprotein; http://identifiers.org/uniprot/P28482|Mitogen-activated protein kinase 1; http://identifiers.org/uniprot/P27361|Mitogen-activated protein kinase 3; http://identifiers.org/reactome/REACT_13301.1|p-ERK1/2/5 [nucleoplasm]', 'species_26$PP2AActive$http://identifiers.org/go/GO:0000159|protein phosphatase type 2A complex', 'species_26$PP2AActive$http://identifiers.org/go/GO:0000159|protein phosphatase type 2A complex']","['BIOMD0000000251', 'BIOMD0000000623', 'BIOMD0000000623']","['Homo sapiens', 'Rattus norvegicus', 'Rattus norvegicus']","['http://identifiers.org/pubmed/20493519', 'http://identifiers.org/pubmed/19804630', 'http://identifiers.org/pubmed/19804630']","['compartment*(k4*ppERKn-k5*pRSKn)', 'compartment_0*Kcat*species_26*species_10/(km+species_10)', 'compartment_0*Kcat*species_26*species_10/(km+species_10)']","['compartment*(k4*ppERKn-k5*pRSKn)', 'compartment_0*Kcat*species_26*species_10/(km+species_10)', 'compartment_0*Kcat*species_26*species_10/(km+species_10)']","['k4=0.1; k5=0.15', 'Kcat=8.8912; km=3496490.0', 'Kcat=8.8912; km=3496490.0']","['http://identifiers.org/reactome/REACT 13229.1|Ribosomal protein S6 kinase [nucleoplasm]', 'http://identifiers.org/uniprot/P63086|Mitogen-activated protein kinase 1; http://identifiers.org/uniprot/P21708|Mitogen-activated protein kinase 3', 'http://identifiers.org/uniprot/P21708|Mitogen-activated protein kinase 3; http://identifiers.org/uniprot/P63086|Mitogen-activated protein kinase 1']","['', '', '']","['https://identifiers.org/sbo/SBO:0000252|SBO:0000252', '', '']","['', 'reactome:P63086; reactome:P21708; opentargets:ENSRNOG00000001849; opentargets:ENSRNOG00000053583', 'reactome:P21708; reactome:P63086; opentargets:ENSRNOG00000053583; opentargets:ENSRNOG00000001849']","['', '5594, 5595', '5594, 5595']","['', 'MAPK1, MAPK3', 'MAPK1, MAPK3']","['', '5594, 5595', '5594, 5595']","['', 'MAPK1, MAPK3', 'MAPK1, MAPK3']","['5594, 5595', '', '']","['MAPK1, MAPK3', '', '']","['5594, 5595', '5594, 5595', '5594, 5595']","['', '', '']","['', 'species_10$ErkActive$MAPK1; MAPK3', 'species_10$ErkActive$MAPK1; MAPK3']","['pRSKn$pRSKn$', 'species_11$ErkInactive$MAPK3; MAPK1', 'species_11$ErkInactive$MAPK3; MAPK1']","['ppERKn$ppERK(nucleus)$MAPK1; MAPK3', 'species_26$PP2AActive$', 'species_26$PP2AActive$']","['```json\n{\n  ""pRSKn"": ""pRSKn"",\n  ""ppERKn"": ""ppERK_nucleus""\n}\n```', '{\n  ""species_10"": ""ErkActive"",\n  ""species_11"": ""ErkInactive"",\n  ""species_26"": ""PP2AActive""\n}', '{\n  ""species_10"": ""ErkActive"",\n  ""species_11"": ""ErkInactive"",\n  ""species_26"": ""PP2AActive""\n}']","['Okay, so I\'m trying to help this user who\'s an excellent biological researcher. They need a JSON object that maps each `id` from a replacement table to a biologically interpretable term. Let me break down the guidelines they provided to make sure I understand correctly.\n\nFirst, each term in the JSON must be a single word. That means I can\'t have multiple words; I need to combine terms if necessary. If the term is an abbreviation or already clear, I shouldn\'t change it much. But if it\'s ambiguous, I should use the replacement table and any references to make it more precise.\n\nLooking at the example they gave, ""R"" becomes ""IL6_R"" and ""L"" becomes ""CSF1R_L"". So, it seems like if the term is a receptor (R) or ligand (L), I need to prepend the specific molecule\'s name, connected by an underscore.\n\nThe replacement table they provided has two entries:\n\n1. For `pRSKn`, the name is also `pRSKn`, and there are no references.\n2. For `ppERKn`, the name is `ppERK(nucleus)`, and the references are MAPK1 and MAPK3.\n\nI need to map each `id` to a biologically interpretable term. Let\'s start with `pRSKn`. Since the name is the same as the id and there are no references, maybe it\'s already a clear term. I should check if it\'s an abbreviation or a specific molecule. If it\'s just a shorthand, perhaps I can leave it as is because changing it might not be necessary.\n\nNext, `ppERKn` is named `ppERK(nucleus)` and references MAPK1 and MAPK3. ERK usually stands for Extracellular Signal-Regulated Kinase, and the phosphorylated form is often denoted with \'p\'. The nucleus location might indicate its state or location. But the references point to MAPK1 and MAPK3, which are the same as ERK2 and ERK1 respectively. So, `ppERK` is a form of ERK, which is a MAPK.\n\nI think the term should reflect the phosphorylated state and possibly the location. Since the name mentions the nucleus, maybe it\'s indicating the active form within the nucleus. So, combining that, I could have `ppERK_active` or `ppERK_nucleus`. But the guidelines say to include states like ""bound"" or ""active"" with an underscore. Since the name specifies the nucleus, perhaps it\'s about localization, but the state might be about activity. Alternatively, since the references are MAPK1 and MAPK3, which are active forms, maybe `ppERK_active` is better.\n\nWait, but the name is `ppERK(nucleus)`. Maybe I should include \'nucleus\' as part of the term. But the JSON needs a single word, so I could use an underscore, making it `ppERK_nucleus`. However, the references point to MAPK1 and MAPK3, which are active forms, so maybe \'active\' is more appropriate.\n\nAlternatively, since the name is about the nucleus, perhaps the term should reflect localization, but the references indicate activity. I\'m a bit confused here. Maybe the term should be `ppERK_active` since the references are active forms, and the name\'s mention of nucleus might be a location, but the main point is the active state.\n\nPutting it together, I think the best approach is to map `pRSKn` as is because there\'s no reference to change it. For `ppERKn`, since the references are MAPK1 and MAPK3, which are active forms, I should map it to `ppERK_active`.\n\nWait, but the replacement table for `ppERKn` has the name as `ppERK(nucleus)`, so maybe the location is important. But the JSON needs a single word, so including \'nucleus\' as a suffix makes sense. So, perhaps `ppERK_nucleus` is the way to go. Alternatively, considering the activity, `ppERK_active` is also possible. I\'m a bit torn here.\n\nGiven the guidelines, the name should be prioritized, so `ppERK(nucleus)` suggests the term should include the nucleus. Therefore, the JSON term should be `ppERK_nucleus`.\n\nSo, the final JSON would be:\n\n{\n  ""pRSKn"": ""pRSKn"",\n  ""ppERKn"": ""ppERK_nucleus""\n}\n\nBut I\'m not entirely sure. Maybe the user expects the references to influence the term, so using the MAPK references, perhaps `ppERK_active` is better. Alternatively, combining both, but that would make it two words, which isn\'t allowed. So, perhaps I should stick with the name provided and include the nucleus as part of the term.\n\nYes, I think that\'s the way to go.', ""Okay, so I need to generate a JSON object that maps each id from the replacement table to a biologically interpretable term. Let me go through the problem step by step.\n\nFirst, looking at the input, there are three ids: species_10, species_11, and species_26. Each has a name and references. \n\nStarting with species_10: The name is ErkActive, and the references are MAPK1 and MAPK3. Erk is a well-known abbreviation for Extracellular signal-regulated kinase, which are MAP kinases. MAPK1 and MAPK3 are the gene symbols for ERK2 and ERK1 respectively. Since the name is ErkActive, and the references point to specific MAPKs, I can map this to a more specific term. However, the guidelines say if the term is already interpretable, don't change it unless necessary. So, maybe I can just keep it as ErkActive, but perhaps adding the state. Alternatively, since the references are specific, maybe combining them. But the guidelines suggest using the name first, so I'll stick with ErkActive.\n\nNext, species_11: The name is ErkInactive, with references MAPK3 and MAPK1. Similar to species_10, but inactive. Again, the name is clear, so I'll map it to ErkInactive.\n\nThen, species_26: The name is PP2AActive. PP2A is a phosphatase, and the term is already specific. Since the references are empty, I don't have more info, so PP2AActive seems appropriate.\n\nWait, but the guidelines mention that sometimes a two-step process is needed. For example, mapping id to name first, then refining with references. So for species_10, the name is ErkActive, but the references are MAPK1 and MAPK3. Maybe I should consider the full names. MAPK1 is ERK2, and MAPK3 is ERK1. So perhaps the term should be more specific, like ERK1_active or ERK2_active? But the name is ErkActive, which is a general term. The guidelines say to prioritize the name column, so I think it's better to keep ErkActive and ErkInactive as they are.\n\nFor species_26, PP2AActive is clear and specific, so that's fine.\n\nSo, the JSON would map each id to its respective term as is, since they are already biologically interpretable and the names are clear."", ""Okay, so I need to generate a JSON object that maps each id from the replacement table to a biologically interpretable term. Let me go through the problem step by step.\n\nFirst, looking at the input, there are three ids: species_10, species_11, and species_26. Each has a name and references. \n\nStarting with species_10: The name is ErkActive, and the references are MAPK1 and MAPK3. Erk is a well-known abbreviation for Extracellular signal-regulated kinase, which are MAP kinases. MAPK1 and MAPK3 are the gene symbols for ERK2 and ERK1 respectively. Since the name is ErkActive, and the references point to specific MAPKs, I can map this to a more specific term. However, the guidelines say if the term is already interpretable, don't change it unless necessary. So, maybe I can just keep it as ErkActive, but perhaps adding the state. Alternatively, since the references are specific, maybe combining them. But the guidelines suggest using the name first, so I'll stick with ErkActive.\n\nNext, species_11: The name is ErkInactive, with references MAPK3 and MAPK1. Similar to species_10, but inactive. Again, the name is clear, so I'll map it to ErkInactive.\n\nThen, species_26: The name is PP2AActive. PP2A is a phosphatase, and the term is already specific. Since the references are empty, I don't have more info, so PP2AActive seems appropriate.\n\nWait, but the guidelines mention that sometimes a two-step process is needed. For example, mapping id to name first, then refining with references. So for species_10, the name is ErkActive, but the references are MAPK1 and MAPK3. Maybe I should consider the full names. MAPK1 is ERK2, and MAPK3 is ERK1. So perhaps the term should be more specific, like ERK1_active or ERK2_active? But the name is ErkActive, which is a general term. The guidelines say to prioritize the name column, so I think it's better to keep ErkActive and ErkInactive as they are.\n\nFor species_26, PP2AActive is clear and specific, so that's fine.\n\nSo, the JSON would map each id to its respective term as is, since they are already biologically interpretable and the names are clear.""]","['=> pRSKn; ppERK_nucleus', 'ErkActive => ErkInactive; PP2AActive', 'ErkActive => ErkInactive; PP2AActive']","['compartment*(k4*ppERK_nucleus-k5*pRSKn)', 'compartment_0*Kcat*PP2AActive*ErkActive/(km+ErkActive)', 'compartment_0*Kcat*PP2AActive*ErkActive/(km+ErkActive)']","[True, True, True]",35.0,15.040497457627168,2.964191346837453,1.0,1.5049008131027222,3.9412903111686055,2.0,0.1966737359762191,3.0733882940201105,4.666666666666667,3.136613716517264,1.0,3
"NFKB1, TNF","['[Nuclear factor NF-kappa-B p105 subunit]', '[Tumor necrosis factor]', '[Tumor necrosis factor]', '[nucleus; Nuclear factor NF-kappa-B p105 subunit]']","['mw8a358487 b18b 42df a646 cd75eb5bfcc2', 'species 24', 'mwc844b7c0 98f5 4d0d 8f0c 00dfe8b54e6d', 'species 39']","['0.2 1E-9*mol', '0.0 μmol', '0.0 1E-9*mol', '0.0 μmol']","['mw8a358487_b18b_42df_a646_cd75eb5bfcc2 => mwc844b7c0_98f5_4d0d_8f0c_00dfe8b54e6d; mw8a358487_b18b_42df_a646_cd75eb5bfcc2', 'species_39 => species_24 + species_39; species_39', 'mw8a358487_b18b_42df_a646_cd75eb5bfcc2 => mwc844b7c0_98f5_4d0d_8f0c_00dfe8b54e6d; mw8a358487_b18b_42df_a646_cd75eb5bfcc2', 'species_39 => species_24 + species_39; species_39']","['mw8a358487_b18b_42df_a646_cd75eb5bfcc2 => mwc844b7c0_98f5_4d0d_8f0c_00dfe8b54e6d; mw8a358487_b18b_42df_a646_cd75eb5bfcc2', 'species_39 => species_24 + species_39; species_39', 'mw8a358487_b18b_42df_a646_cd75eb5bfcc2 => mwc844b7c0_98f5_4d0d_8f0c_00dfe8b54e6d; mw8a358487_b18b_42df_a646_cd75eb5bfcc2', 'species_39 => species_24 + species_39; species_39']","['mw8a358487_b18b_42df_a646_cd75eb5bfcc2$NFkB$http://identifiers.org/uniprot/P19838|Nuclear factor NF-kappa-B p105 subunit', 'species_39$NFkB(nuc)$http://identifiers.org/go/GO:0005634|nucleus; http://identifiers.org/uniprot/P25799|Nuclear factor NF-kappa-B p105 subunit', 'mw8a358487_b18b_42df_a646_cd75eb5bfcc2$NFkB$http://identifiers.org/uniprot/P19838|Nuclear factor NF-kappa-B p105 subunit', 'species_39$NFkB(nuc)$http://identifiers.org/go/GO:0005634|nucleus; http://identifiers.org/uniprot/P25799|Nuclear factor NF-kappa-B p105 subunit']","['mwc844b7c0_98f5_4d0d_8f0c_00dfe8b54e6d$TNF$http://identifiers.org/uniprot/P01375|Tumor necrosis factor', 'species_24$TNFa$http://identifiers.org/uniprot/P06804|Tumor necrosis factor£species_39$NFkB(nuc)$http://identifiers.org/go/GO:0005634|nucleus; http://identifiers.org/uniprot/P25799|Nuclear factor NF-kappa-B p105 subunit', 'mwc844b7c0_98f5_4d0d_8f0c_00dfe8b54e6d$TNF$http://identifiers.org/uniprot/P01375|Tumor necrosis factor', 'species_24$TNFa$http://identifiers.org/uniprot/P06804|Tumor necrosis factor£species_39$NFkB(nuc)$http://identifiers.org/go/GO:0005634|nucleus; http://identifiers.org/uniprot/P25799|Nuclear factor NF-kappa-B p105 subunit']","['mw8a358487_b18b_42df_a646_cd75eb5bfcc2$NFkB$http://identifiers.org/uniprot/P19838|Nuclear factor NF-kappa-B p105 subunit', 'species_39$NFkB(nuc)$http://identifiers.org/go/GO:0005634|nucleus; http://identifiers.org/uniprot/P25799|Nuclear factor NF-kappa-B p105 subunit', 'mw8a358487_b18b_42df_a646_cd75eb5bfcc2$NFkB$http://identifiers.org/uniprot/P19838|Nuclear factor NF-kappa-B p105 subunit', 'species_39$NFkB(nuc)$http://identifiers.org/go/GO:0005634|nucleus; http://identifiers.org/uniprot/P25799|Nuclear factor NF-kappa-B p105 subunit']","['BIOMD0000000477', 'BIOMD0000000489', 'BIOMD0000000477', 'BIOMD0000000489']","['Homo sapiens', 'Mus musculus', 'Homo sapiens', 'Mus musculus']","['http://identifiers.org/pubmed/23994140', 'http://identifiers.org/pubmed/23936158', 'http://identifiers.org/pubmed/23994140', 'http://identifiers.org/pubmed/23936158']","['mwbad3f510_fbca_4aa7_a4c2_5c1b47297802*mw8a358487_b18b_42df_a646_cd75eb5bfcc2^mw4d5fd70d_8603_4056_adfa_5af26d657455/(mw2fa0d3fe_4e99_49d2_a339_089198589a1e+mw8a358487_b18b_42df_a646_cd75eb5bfcc2^mw4d5fd70d_8603_4056_adfa_5af26d657455)', 'compartment_1*k1*species_39^2', 'mwbad3f510_fbca_4aa7_a4c2_5c1b47297802*mw8a358487_b18b_42df_a646_cd75eb5bfcc2^mw4d5fd70d_8603_4056_adfa_5af26d657455/(mw2fa0d3fe_4e99_49d2_a339_089198589a1e+mw8a358487_b18b_42df_a646_cd75eb5bfcc2^mw4d5fd70d_8603_4056_adfa_5af26d657455)', 'compartment_1*k1*species_39^2']","['mwbad3f510_fbca_4aa7_a4c2_5c1b47297802*mw8a358487_b18b_42df_a646_cd75eb5bfcc2^mw4d5fd70d_8603_4056_adfa_5af26d657455/(mw2fa0d3fe_4e99_49d2_a339_089198589a1e+mw8a358487_b18b_42df_a646_cd75eb5bfcc2^mw4d5fd70d_8603_4056_adfa_5af26d657455)', 'compartment_1*k1*species_39^2', 'mwbad3f510_fbca_4aa7_a4c2_5c1b47297802*mw8a358487_b18b_42df_a646_cd75eb5bfcc2^mw4d5fd70d_8603_4056_adfa_5af26d657455/(mw2fa0d3fe_4e99_49d2_a339_089198589a1e+mw8a358487_b18b_42df_a646_cd75eb5bfcc2^mw4d5fd70d_8603_4056_adfa_5af26d657455)', 'compartment_1*k1*species_39^2']","['mwbad3f510_fbca_4aa7_a4c2_5c1b47297802=2.35 nanomole/second; mw2fa0d3fe_4e99_49d2_a339_089198589a1e=0.43 nanomole; mw4d5fd70d_8603_4056_adfa_5af26d657455=1.0', 'k1=0.001', 'mwbad3f510_fbca_4aa7_a4c2_5c1b47297802=2.35 nanomole/second; mw2fa0d3fe_4e99_49d2_a339_089198589a1e=0.43 nanomole; mw4d5fd70d_8603_4056_adfa_5af26d657455=1.0', 'k1=0.001']","['http://identifiers.org/uniprot/P19838|Nuclear factor NF-kappa-B p105 subunit', 'http://identifiers.org/uniprot/P06804|Tumor necrosis factor', 'http://identifiers.org/uniprot/P01375|Tumor necrosis factor', 'http://identifiers.org/go/GO:0005634|nucleus; http://identifiers.org/uniprot/P25799|Nuclear factor NF-kappa-B p105 subunit']","['', '', '', '']","['', '', '', '']","['reactome:P19838; opentargets:ENSG00000109320', 'reactome:P06804; opentargets:ENSMUSG00000024401', 'reactome:P01375; opentargets:ENSG00000232810', 'reactome:P25799; opentargets:ENSMUSG00000028163']","['7124', '4790, 7124', '7124', '4790, 7124']","['TNF', 'NFKB1, TNF', 'TNF', 'NFKB1, TNF']","['4790', '4790', '4790', '4790']","['NFKB1', 'NFKB1', 'NFKB1', 'NFKB1']","['4790', '4790', '4790', '4790']","['NFKB1', 'NFKB1', 'NFKB1', 'NFKB1']","['4790, 7124', '4790, 7124', '4790, 7124', '4790, 7124']","['', '', '', '']","['mw8a358487_b18b_42df_a646_cd75eb5bfcc2$NFkB$NFKB1', 'species_39$NFkB(nuc)$NFKB1', 'mw8a358487_b18b_42df_a646_cd75eb5bfcc2$NFkB$NFKB1', 'species_39$NFkB(nuc)$NFKB1']","['mwc844b7c0_98f5_4d0d_8f0c_00dfe8b54e6d$TNF$TNF', 'species_24$TNFa$TNF£species_39$NFkB(nuc)$NFKB1', 'mwc844b7c0_98f5_4d0d_8f0c_00dfe8b54e6d$TNF$TNF', 'species_24$TNFa$TNF£species_39$NFkB(nuc)$NFKB1']","['mw8a358487_b18b_42df_a646_cd75eb5bfcc2$NFkB$NFKB1', 'species_39$NFkB(nuc)$NFKB1', 'mw8a358487_b18b_42df_a646_cd75eb5bfcc2$NFkB$NFKB1', 'species_39$NFkB(nuc)$NFKB1']","['```json\n{\n  ""mw8a358487_b18b_42df_a646_cd75eb5bfcc2"": ""NFkB"",\n  ""mwc844b7c0_98f5_4d0d_8f0c_00dfe8b54e6d"": ""TNF""\n}\n```', '{\n  ""species_24"": ""TNFa"",\n  ""species_39"": ""NFkB_nuc""\n}', '```json\n{\n  ""mw8a358487_b18b_42df_a646_cd75eb5bfcc2"": ""NFkB"",\n  ""mwc844b7c0_98f5_4d0d_8f0c_00dfe8b54e6d"": ""TNF""\n}\n```', '```json\n{\n  ""species_24"": ""TNFa"",\n  ""species_39"": ""NFkB(nuc)""\n}\n```']","['Okay, so I\'m trying to help this user who\'s an excellent biological researcher. They need to generate a JSON object that maps each `id` from a replacement table to a biologically interpretable term. The user has provided specific guidelines, so I need to follow them carefully.\n\nFirst, let\'s look at the replacement table they provided. The table has four columns: role, id, name, and references. There are two rows. The first row is for reactants with id mw8a358487_b18b_42df_a646_cd75eb5bfcc2, name NFkB, and reference NFKB1. The second row is for products with id mwc844b7c0_98f5_4d0d_8f0c_00dfe8b54e6d, name TNF, and reference TNF.\n\nThe guidelines say that each term in the JSON object must be a single word. If the term is a simple abbreviation and can be interpreted as-is, we shouldn\'t make significant changes. Also, if it\'s a receptor or ligand, we might need to combine them with an underscore, like IL6_R or CSF1R_L. But in this case, the names are NFkB and TNF, which are already common abbreviations in biology.\n\nLooking at the first id, mw8a358487_b18b_42df_a646_cd75eb5bfcc2, the name is NFkB. The reference is NFKB1, which is the gene symbol for NF-κB. Since NFkB is a well-known abbreviation, it\'s better to use that rather than the gene symbol. So the term for this id should be ""NFkB"".\n\nThe second id, mwc844b7c0_98f5_4d0d_8f0c_00dfe8b54e6d, has the name TNF and the reference TNF. TNF is the standard abbreviation for Tumor Necrosis Factor, so using ""TNF"" is appropriate here.\n\nThe user also mentioned that sometimes a two-step process is needed, but in this case, the names are already clear and don\'t require further mapping or refinement. There\'s no indication that these terms are ambiguous or need to be expanded into receptor or ligand forms. Also, there are no states like ""bound"" or ""active"" mentioned, so we don\'t need to include those.\n\nTherefore, the JSON object should map each id to its respective name directly. The result would be a simple mapping without any additional changes.', 'Okay, so I\'m trying to help this user who\'s an excellent biological researcher. They need to generate a JSON object that maps each `id` from a replacement table to a biologically interpretable term. The user has provided specific guidelines, so I need to make sure I follow them closely.\n\nFirst, I\'ll look at the guidelines. Each term must be a single word. That means I can\'t have spaces or multiple words. Also, if there\'s a receptor or ligand, I need to connect them with an underscore, like ""IL6_R"" or ""CSF1R_L"". If the term is ambiguous, I should use context or references to make it more interpretable. Sometimes, a two-step process is needed: first map the id to the name, then refine it using references.\n\nI also need to consider states like ""bound"" or ""active"" and include them as part of the term with an underscore, such as ""IL6_R_active"". If the term is already an abbreviation and makes sense, I shouldn\'t change it much. The user also mentioned that if the name and reference columns have similar terms, I should prioritize the name for consistency.\n\nNow, looking at the input provided:\n\nThe equation is:\nspecies_39 => species_24 + species_39; species_39\n\nAnd the replacement table is:\n\n| role      | id         | name      | references   |\n|:----------|:-----------|:----------|:-------------|\n| reactants | species_39 | NFkB(nuc) | NFKB1        |\n| products  | species_24 | TNFa      | TNF          |\n| products  | species_39 | NFkB(nuc) | NFKB1        |\n| modifiers | species_39 | NFkB(nuc) | NFKB1        |\n\nSo, I need to map each id to a term. Let\'s go through each id.\n\nStarting with species_39. The name is NFkB(nuc), and the reference is NFKB1. NFkB(nuc) stands for Nuclear Factor kappa B in the nucleus. The reference NFKB1 is another name for the same thing. The term is already a bit interpretable, but it\'s in parentheses. The user says to avoid significant changes if it\'s already an abbreviation, but in this case, NFkB(nuc) is a bit ambiguous because it\'s not a single word. Maybe I should make it a single word by removing the parentheses. So, NFkB_nuc.\n\nNext, species_24. The name is TNFa, and the reference is TNF. TNFa is an abbreviation for Tumor Necrosis Factor alpha. Since the name is TNFa, which is a common abbreviation, and the reference is TNF, which is the general term. The guideline says to prioritize the name, so I should use TNFa as it\'s more specific. But the user wants a single word. TNFa is already a single word, so that\'s fine.\n\nSo, putting it all together, the JSON object should map species_39 to NFkB_nuc and species_24 to TNFa.\n\nWait, let me double-check. The user\'s example showed that if it\'s a receptor or ligand, we connect with an underscore. But NFkB is a transcription factor, not a receptor or ligand, so maybe I don\'t need to change it that way. Also, the state is ""nuc"", which stands for nuclear. So NFkB_nuc makes sense as a single term.\n\nI think that\'s all. So the final JSON would be:\n{\n  ""species_24"": ""TNFa"",\n  ""species_39"": ""NFkB_nuc""\n}', 'Okay, so I\'m trying to help this user who\'s an excellent biological researcher. They need to generate a JSON object that maps each `id` from a replacement table to a biologically interpretable term. The user has provided specific guidelines, so I need to make sure I follow them closely.\n\nFirst, I\'ll look at the guidelines. Each term must be a single word. That means I can\'t have spaces or multiple words. Also, if there\'s a receptor or ligand, I need to connect them with an underscore, like ""IL6_R"" or ""CSF1R_L"". If the term is ambiguous, I should use context or references to make it more interpretable. Sometimes, a two-step process is needed: first map the id to the name, then refine it using references.\n\nI also need to consider states like ""bound"" or ""active"" and include them as part of the term with an underscore. If the term is already an abbreviation or clear, I shouldn\'t change it much. Prioritize the phrasing from the ""name"" column for consistency.\n\nLooking at the input, the equation is a bit confusing, but I see the replacement table has three rows. Each row has a role (reactants, products, modifiers), an id, a name, and references. The equation seems to relate two ids: mw8a358487_b18b_42df_a646_cd75eb5bfcc2 and mwc844b7c0_98f5_4d0d_8f0c_00dfe8b54e6d.\n\nIn the replacement table, the first id (mw8a358487_b18b_42df_a646_cd75eb5bfcc2) appears in both reactants and modifiers, with the name NFkB and reference NFKB1. The second id (mwc844b7c0_98f5_4d0d_8f0c_00dfe8b54e6d) is a product, with the name TNF and reference TNF.\n\nSo, for each id, I need to map it to a biologically interpretable term. Let\'s start with the first id. The name is NFkB, and the reference is NFKB1. NFkB is a well-known transcription factor, so it\'s a single word. Since it\'s not a receptor or ligand, I don\'t need to add an underscore. The term is already clear, so I\'ll keep it as ""NFkB"".\n\nThe second id has the name TNF, and the reference is TNF as well. TNF is a cytokine, so it\'s a ligand. According to the guidelines, I should use the name from the ""name"" column if possible, so I\'ll go with ""TNF"". Since it\'s a ligand, maybe I should add ""_L"", but the guidelines say to use the name if it\'s reasonably interpretable. So perhaps ""TNF"" is sufficient, but I\'m a bit confused here. Wait, the guidelines mention that if a receptor or ligand can be identified, create a single word with an underscore. So maybe I should consider if TNF is a ligand.\n\nLooking back, the replacement table\'s ""name"" column says TNF, and the reference is TNF. So it\'s a ligand, right? So according to the guidelines, I should create a term like ""CSF1R_L"" for a ligand. So for TNF, I should add ""_L"". So the term would be ""TNF_L"". But wait, the guidelines say if the term is a simple abbreviation, it\'s not recommended to make significant changes. TNF is an abbreviation, so perhaps it\'s better to leave it as TNF without adding ""_L"".\n\nI\'m a bit torn here. The guidelines say to use the name if it\'s reasonably interpretable. Since TNF is a common abbreviation, maybe just ""TNF"" is acceptable without adding ""_L"". Alternatively, if I were to follow the receptor/ligand guideline, I might make it ""TNF_L"", but since the name is TNF, perhaps it\'s better to keep it as is.\n\nSo, for the first id, I\'ll map it to ""NFkB"". For the second id, I\'ll map it to ""TNF"". Therefore, the JSON object will have two keys: the first id mapped to ""NFkB"" and the second id mapped to ""TNF"".', 'Okay, so I\'m trying to help this user who\'s an excellent biological researcher. They need to generate a JSON object that maps each `id` from a replacement table to a biologically interpretable term. The user has provided specific guidelines, so I need to make sure I follow them closely.\n\nFirst, I\'ll look at the guidelines. Each term must be a single word. That means I can\'t have spaces or multiple words. Also, if there\'s a receptor or ligand, I need to connect them with an underscore, like ""IL6_R"" or ""CSF1R_L"". If the term is ambiguous, I should use context or references to make it more interpretable. Sometimes, a two-step process is needed: first map the id to the name, then refine it using references.\n\nI also need to consider states like ""bound"" or ""active"" and include them as part of the term with an underscore, such as ""IL6_R_active"". If the term is already an abbreviation and makes sense, I shouldn\'t change it much. For example, if the name is ""TNFa"", maybe it can stay as is, but if the reference says ""TNF"", perhaps I should use that for consistency.\n\nLooking at the replacement table provided, I see three entries:\n\n1. role: reactants, id: species_39, name: NFkB(nuc), reference: NFKB1\n2. role: products, id: species_24, name: TNFa, reference: TNF\n3. role: products, id: species_39, name: NFkB(nuc), reference: NFKB1\n4. role: modifiers, id: species_39, name: NFkB(nuc), reference: NFKB1\n\nWait, actually, species_39 appears in three roles: reactants, products, and modifiers. So I need to map each id to its term. But species_39 is the same in all three roles. So the JSON will have two keys: species_24 and species_39.\n\nFor species_24, the name is TNFa, and the reference is TNF. The guideline says to prioritize the name column for consistency, so maybe we use ""TNFa"". But the reference is ""TNF"", which is a common abbreviation. Hmm, but the user says to prioritize the name column. So I\'ll go with ""TNFa"".\n\nFor species_39, the name is NFkB(nuc) and the reference is NFKB1. The name is a bit ambiguous because it includes the location (nuc for nuclear). The guidelines suggest replacing ambiguous terms with more interpretable ones. So, perhaps I should expand NFkB(nuc) to something more descriptive. NFkB is a transcription factor, and when it\'s in the nucleus, it\'s active. So maybe ""NFkB_active"". Or perhaps ""NFkB_nuc_active"". But the user mentioned to include states like ""bound"" or ""active"" as part of the term. So maybe ""NFkB_active"".\n\nWait, but the replacement table has the same id for reactants, products, and modifiers. So in the JSON, species_39 would map to ""NFkB_active"" to indicate its state as active when it\'s a product or modifier. The reactant might be NFkB in the cytoplasm, but since the name is NFkB(nuc), perhaps it\'s already in the nucleus, so it\'s active.\n\nPutting it all together, the JSON would be:\n\n{\n  ""species_24"": ""TNFa"",\n  ""species_39"": ""NFkB_active""\n}\n\nI think that\'s the right approach. I\'m using the name from the table but also considering the reference to make sure it\'s biologically accurate. I\'m making sure each term is a single word and using the underscore to indicate the state. Since species_39 appears in multiple roles, but the name is consistent, I can map it once.']","['NFkB => TNF; NFkB', 'NFkB_nuc => TNFa + NFkB_nuc; NFkB_nuc', 'NFkB => TNF; NFkB', 'NFkB(nuc) => TNFa + NFkB(nuc); NFkB(nuc)']","['mwbad3f510_fbca_4aa7_a4c2_5c1b47297802*NFkB^mw4d5fd70d_8603_4056_adfa_5af26d657455/(mw2fa0d3fe_4e99_49d2_a339_089198589a1e+NFkB^mw4d5fd70d_8603_4056_adfa_5af26d657455)', 'compartment_1*k1*NFkB_nuc^2', 'mwbad3f510_fbca_4aa7_a4c2_5c1b47297802*NFkB^mw4d5fd70d_8603_4056_adfa_5af26d657455/(mw2fa0d3fe_4e99_49d2_a339_089198589a1e+NFkB^mw4d5fd70d_8603_4056_adfa_5af26d657455)', 'compartment_1*k1*NFkB(nuc)^2']","[True, True, True, True]",22.0,16.77191343135492,3.370770972826082,8.0,1.2563207149505615,3.199559211514738,38.0,0.1568135917186737,2.304031064978404,34.16666666666667,2.467553402843738,16.0,4
"MAPK1, MAPK3, RPS6KA1","['[p90 S6 kinase; Ribosomal protein S6 kinase alpha-1]', '[p90 S6 kinase; Ribosomal protein S6 kinase alpha-1]']","['species 13', 'species 12']","['120000.0 mmol', '0.0 mmol']","['species_13 => species_12; species_10', 'species_13 => species_12; species_10']","['species_13 => species_12; species_10', 'species_13 => species_12; species_10']","['species_13$P90RskInactive$http://identifiers.org/uniprot/Q9Z1I2|p90 S6 kinase; http://identifiers.org/uniprot/Q63531|Ribosomal protein S6 kinase alpha-1', 'species_13$P90RskInactive$http://identifiers.org/uniprot/Q9Z1I2|p90 S6 kinase; http://identifiers.org/uniprot/Q63531|Ribosomal protein S6 kinase alpha-1']","['species_12$P90RskActive$http://identifiers.org/uniprot/Q9Z1I2|p90 S6 kinase; http://identifiers.org/uniprot/Q63531|Ribosomal protein S6 kinase alpha-1', 'species_12$P90RskActive$http://identifiers.org/uniprot/Q9Z1I2|p90 S6 kinase; http://identifiers.org/uniprot/Q63531|Ribosomal protein S6 kinase alpha-1']","['species_10$ErkActive$http://identifiers.org/uniprot/P63086|Mitogen-activated protein kinase 1; http://identifiers.org/uniprot/P21708|Mitogen-activated protein kinase 3', 'species_10$ErkActive$http://identifiers.org/uniprot/P63086|Mitogen-activated protein kinase 1; http://identifiers.org/uniprot/P21708|Mitogen-activated protein kinase 3']","['BIOMD0000000623', 'BIOMD0000000623']","['Rattus norvegicus', 'Rattus norvegicus']","['http://identifiers.org/pubmed/19804630', 'http://identifiers.org/pubmed/19804630']","['compartment_0*Kcat*species_10*species_13/(km+species_13)', 'compartment_0*Kcat*species_10*species_13/(km+species_13)']","['compartment_0*Kcat*species_10*species_13/(km+species_13)', 'compartment_0*Kcat*species_10*species_13/(km+species_13)']","['Kcat=0.0213697; km=763523.0', 'Kcat=0.0213697; km=763523.0']","['http://identifiers.org/uniprot/Q9Z1I2|p90 S6 kinase; http://identifiers.org/uniprot/Q63531|Ribosomal protein S6 kinase alpha-1', 'http://identifiers.org/uniprot/Q9Z1I2|p90 S6 kinase; http://identifiers.org/uniprot/Q63531|Ribosomal protein S6 kinase alpha-1']","['', '']","['', '']","['reactome:Q63531', 'reactome:Q63531']","['6195', '6195']","['RPS6KA1', 'RPS6KA1']","['6195', '6195']","['RPS6KA1', 'RPS6KA1']","['5594, 5595', '5594, 5595']","['MAPK1, MAPK3', 'MAPK1, MAPK3']","['5594, 5595, 6195', '5594, 5595, 6195']","['', '']","['species_13$P90RskInactive$p90 S6 kinase; RPS6KA1', 'species_13$P90RskInactive$p90 S6 kinase; RPS6KA1']","['species_12$P90RskActive$p90 S6 kinase; RPS6KA1', 'species_12$P90RskActive$p90 S6 kinase; RPS6KA1']","['species_10$ErkActive$MAPK1; MAPK3', 'species_10$ErkActive$MAPK1; MAPK3']","['```json\n{\n  ""species_13"": ""P90Rsk_inactive"",\n  ""species_12"": ""P90Rsk_active"",\n  ""species_10"": ""Erk_active""\n}\n```', '```json\n{\n  ""species_13"": ""P90Rsk_inactive"",\n  ""species_12"": ""P90Rsk_active"",\n  ""species_10"": ""Erk_active""\n}\n```']","['Okay, so I need to generate a JSON object that maps each `id` from the replacement table to a biologically interpretable term. Let me start by understanding the guidelines.\n\nFirst, each term must be a single word. If it\'s a receptor or ligand, I should combine them with an underscore. For example, ""R"" becomes ""IL6_R"" and ""L"" becomes ""CSF1R_L"". But in this case, looking at the replacement table, I don\'t see any R or L, so maybe that doesn\'t apply here.\n\nNext, I should consider if any terms need a two-step process. That means first mapping the `id` to the `name` and then refining it using the references. Let me check each `id` one by one.\n\nStarting with species_13: the name is P90RskInactive, and the references mention p90 S6 kinase and RPS6KA1. So, I need to find a biologically accurate term. P90Rsk is known as p90 ribosomal S6 kinase. The term is already pretty specific, but since it\'s inactive, maybe I should include that state. So, it would be P90Rsk_inactive.\n\nFor species_12: the name is P90RskActive, references are the same. Following the same logic, it should be P90Rsk_active.\n\nThen, species_10: the name is ErkActive, and the references are MAPK1 and MAPK3. ERK is a well-known term, so ErkActive can stay as is, but to be more precise, since the references specify MAPK1 and MAPK3, but the name is ErkActive, it\'s better to keep it as Erk_active for consistency with the name column.\n\nWait, but the guidelines say if the name is simple and interpretable, don\'t change it much. So maybe ErkActive is fine, but adding the state with an underscore makes it clearer. So I\'ll go with Erk_active.\n\nPutting it all together, the JSON should have species_13 mapped to P90Rsk_inactive, species_12 to P90Rsk_active, and species_10 to Erk_active.\n\nI think that covers all the guidelines. Let me make sure there are no other states or abbreviations that need changing. The terms are all single words with states included as underscores, which fits the requirements. I don\'t see any need for more changes.', 'Okay, so I need to generate a JSON object that maps each `id` from the replacement table to a biologically interpretable term. Let me start by understanding the guidelines.\n\nFirst, each term must be a single word. If it\'s a receptor or ligand, I should combine them with an underscore. For example, ""R"" becomes ""IL6_R"" and ""L"" becomes ""CSF1R_L"". But in this case, looking at the replacement table, I don\'t see any R or L, so maybe that doesn\'t apply here.\n\nNext, I should consider if any terms need a two-step process. That means first mapping the `id` to the `name` and then refining it using the references. Let me check each `id` one by one.\n\nStarting with species_13: the name is P90RskInactive, and the references mention p90 S6 kinase and RPS6KA1. So, I need to find a biologically accurate term. P90Rsk is known as p90 ribosomal S6 kinase. The term is already pretty specific, but since it\'s inactive, maybe I should include that state. So, it would be P90Rsk_inactive.\n\nFor species_12: the name is P90RskActive, references are the same. Following the same logic, it should be P90Rsk_active.\n\nThen, species_10: the name is ErkActive, and the references are MAPK1 and MAPK3. ERK is a well-known term, so ErkActive can stay as is, but to be more precise, since the references specify MAPK1 and MAPK3, but the name is ErkActive, it\'s better to keep it as Erk_active for consistency with the name column.\n\nWait, but the guidelines say if the name is simple and interpretable, don\'t change it much. So maybe ErkActive is fine, but adding the state with an underscore makes it clearer. So I\'ll go with Erk_active.\n\nPutting it all together, the JSON should have species_13 mapped to P90Rsk_inactive, species_12 to P90Rsk_active, and species_10 to Erk_active.\n\nI think that covers all the guidelines. Let me make sure there are no other states or abbreviations that need changing. The terms are all single words with states included as underscores, which fits the requirements. I don\'t see any need for more changes.']","['P90Rsk_inactive => P90Rsk_active; Erk_active', 'P90Rsk_inactive => P90Rsk_active; Erk_active']","['compartment_0*Kcat*Erk_active*P90Rsk_inactive/(km+P90Rsk_inactive)', 'compartment_0*Kcat*Erk_active*P90Rsk_inactive/(km+P90Rsk_inactive)']","[True, True]",125.0,10.366211913128776,1.866552594923615,117.0,0.939394235610962,2.2538912848487174,33.0,0.1588279902935028,2.342911810007888,47.66666666666666,2.2957968316542674,25.0,2
