from typing import Annotated, List, TypedDict, Literal, Any, Optional, Dict
from pydantic import BaseModel, Field
import operator

# ===================================================================
# Pydantic Models (For Structured Data and LLM Outputs)
# ===================================================================

class SectionContent(BaseModel):
    """
    Represents the content of a single analysis section, including a
    concise summary and a list of supporting source URLs.
    """
    content: str = Field(
        description="Concise summary of the findings."
    )
    sources: List[str] = Field(
        default_factory=list,
        description="List of source URLs that support the findings."
    )

class ReactionAdditions(BaseModel):
    """
    Represents additional biochemical reactions identified from web search results
    to enhance network connectivity through feedback loops and crosstalk mechanisms.
    """
    added_reactions: List[str] = Field(
        default_factory=list,
        description="List of new reaction equations following the standard format (e.g., 'A phosphorylates B --> B_p')."
    )
    rationale: str = Field(
        description="Brief explanation of why these reactions were added, focusing on the biological mechanisms identified."
    )
    sources: List[str] = Field(
        default_factory=list,
        description="List of source URLs from web search results that support the added reactions."
    )

class PathwayAnalysisSection(BaseModel):
    """
    Defines the structure and metadata for a section of the pathway analysis,
    such as identifying the main pathway or the expected readouts.
    """
    section_type: Literal["main_signaling_pathway", "expected_readouts"] = Field(
        description="Type of section being analyzed."
    )
    title: str = Field(
        description="Title of the section."
    )
    description: str = Field(
        description="Brief description of what this section should contain."
    )

class PathwayAnalysisSections(BaseModel):
    """
    A container for a list of PathwayAnalysisSection objects, representing
    all sections to be researched for the given reaction equations.
    """
    sections: List[PathwayAnalysisSection] = Field(
        description="List of sections to analyze for the reaction equations."
    )

class SearchQuery(BaseModel):
    """

    Represents a single, targeted search query for a web search engine.
    """
    search_query: str = Field(None, description="Query for web search.")

class Queries(BaseModel):
    """
    Represents a list of search queries to be generated by the LLM.
    """
    queries: List[SearchQuery] = Field(
        description="List of search queries."
    )

class ReadoutRefinementDecision(BaseModel):
    """
    Schema for the LLM's decision on whether to refine the experimental readouts,
    including the reasoning and specific suggestions if applicable.
    """
    should_refine: bool = Field(
        description="Whether the readouts should be refined to include more downstream molecules."
    )
    reasoning: str = Field(
        description="Brief explanation of the decision."
    )
    suggested_improvements: Optional[str] = Field(
        default=None,
        description="Specific suggestions for improving the readouts if refinement is needed."
    )


# ===================================================================
# Graph State TypedDicts (For Managing State within Graphs)
# ===================================================================

class ReportState(TypedDict):
    """
    The primary state object for the main analysis graph. It accumulates
    all information as the graph progresses.
    """
    reactions: str
    experimental_condition: Optional[str]
    sections: List[PathwayAnalysisSection]
    # The `Annotated` type allows results from parallel executions of the 
    # section-building subgraph to be aggregated into this list.
    completed_sections: Annotated[list, operator.add]
    final_report: 'PathwayAnalysisOutput' # Forward reference

class ExtendedReportState(ReportState):
    """
    An extended version of ReportState used after initial sections are complete.
    It adds fields for the extracted pathway and readouts.
    """
    main_pathway: str
    initial_readouts: str
    refined_readouts: str

class SectionState(TypedDict):
    """
    The state object for the subgraph responsible for building a single section.
    It contains all necessary information for the query->search->write sequence.
    """
    reactions: str
    experimental_condition: Optional[str]
    section: PathwayAnalysisSection
    search_queries: List[SearchQuery]
    source_str: str # Formatted string of content from web search
    completed_sections: List[Dict[str, Any]]

class ReadoutRefinementState(TypedDict):
    """
    The state object for the subgraph that iteratively refines the
    expected experimental readouts.
    """
    reactions: str
    main_pathway: str
    current_readouts: str
    refinement_count: int
    final_readouts: str

class FeedbackEnhancementState(TypedDict):
    """
    The primary state object for the feedback enhancement graph. It accumulates
    information as the graph progresses to enhance the reaction network.
    """
    reactions: str
    source_nodes: str
    sink_nodes: str
    main_signaling_pathways: str
    expected_readouts: str
    search_queries: List[str]
    source_str: str # Formatted string of content from web search
    # The `Annotated` type allows results from multiple enhancement iterations
    # to be aggregated into this list.
    added_reactions: List[str]
    rationale: str
    sources: List[str]  # Sources for the enhanced reactions

# ===================================================================
# Graph I/O Schemas (For Graph Inputs and Outputs)
# ===================================================================

class ReportStateInput(TypedDict):
    """
    Defines the initial input required to start the main graph.
    """
    reactions: str
    experimental_condition: Optional[str]

class PathwayAnalysisOutput(BaseModel):
    """
    Defines the final, structured output of the entire analysis,
    containing the main pathway and the final list of expected readouts.
    """
    main_signaling_pathway: str = Field(
        description="Main signaling pathway identified from the reactions."
    )
    expected_readouts: str = Field(
        description="Expected readouts from the signaling pathway."
    )

class ReportStateOutput(TypedDict):
    """
    Defines the final output structure of the main graph.
    """
    final_report: PathwayAnalysisOutput

class SectionOutputState(TypedDict):
    """
    The output schema for the section-building subgraph. This key is
    duplicated in the main graph's state for the Send() API to use.
    """
    completed_sections: List[Dict[str, Any]]

class ReadoutRefinementOutputState(TypedDict):
    """
    The output schema for the readout-refinement subgraph.
    """
    refined_readouts: str

class FeedbackEnhancementInput(TypedDict):
    """
    Defines the initial input required to start the feedback enhancement graph.
    """
    reactions: str
    source_nodes: str
    sink_nodes: str
    main_signaling_pathways: str
    expected_readouts: str

class FeedbackEnhancementOutput(TypedDict):
    """
    The final output of the feedback enhancement process.
    """
    original_reactions: str
    enhanced_reactions: str
    added_reactions: List[str]
    enhancement_summary: str